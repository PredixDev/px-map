{"version":3,"sources":["px-map-behavior-control.es6.js"],"names":["namespace","window","PxMapBehavior","ControlImpl","properties","position","type","String","value","observer","addInst","parent","elementInst","addTo","removeInst","remove","Control","Layer","ZoomControlImpl","zoomInText","zoomOutText","zoomInTitle","zoomOutTitle","language","resources","Object","createInst","options","L","control","zoom","updateInst","lastOptions","nextOptions","setPosition","getInstOptions","localize","ZoomControl","Polymer","AppLocalizeBehavior","ScaleControlImpl","imperialUnits","Boolean","metricUnits","reverseColors","PxMap","ScaleControl","setReverseColors","metric","showMetric","imperial","showImperial","klass","map","__scaleContainer","DomUtil","addClass","shouldReverse","removeClass","shouldShowImperial","_iScale","create","_update","shouldShowMetric","_mScale","Scale"],"mappings":"8tDAAA,CAAC,UAAW,CACV,aAOA,GAAMA,WAAaC,OAAOC,aAAP,CAAuBD,OAAOC,aAAP,EAAwB,EAAlE,CAMA,GAAMC,aAAc,CAClBC,WAAY,CAOVC,SAAU,CACRC,KAAMC,MADE,CAERC,MAAO,aAFC,CAGRC,SAAU,kBAHF,CAPA,CADM,CAelBC,OAfkB,kBAeVC,MAfU,CAeF,CACd,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBF,MAAvB,CACD,CAjBiB,CAmBlBG,UAnBkB,qBAmBPH,MAnBO,CAmBC,CACjB,KAAKC,WAAL,CAAiBG,MAAjB,EACD,CArBiB,CAApB,CAwBAf,UAAUgB,OAAV,CAAoB,CAClBhB,UAAUiB,KADQ,CAElBd,WAFkB,CAApB,CASA,GAAMe,iBAAkB,CACtBd,WAAY,CAOVe,WAAY,CACVb,KAAMC,MADI,CAEVC,MAAO,4BAFG,CAPF,CAkBVY,YAAa,CACXd,KAAMC,MADK,CAEXC,MAAO,6BAFI,CAlBH,CA6BVa,YAAa,CACXf,KAAMC,MADK,CAEXC,MAAO,SAFI,CA7BH,CAwCVc,aAAc,CACZhB,KAAMC,MADM,CAEZC,MAAO,UAFK,CAxCJ,CAkDVe,SAAU,CACRjB,KAAMC,MADE,CAERC,MAAO,IAFC,CAlDA,CA4DVgB,UAAW,CACTlB,KAAMmB,MADG,CAETjB,MAAO,gBAAW,CAChB,MAAO,CAAE,KAAM,CAAC,UAAW,SAAZ,CAAuB,WAAY,UAAnC,CAAR,CACE,KAAM,CAAC,UAAW,WAAZ,CAAyB,WAAY,YAArC,CADR,CAGR,CANQ,CA5DD,CADU,CAuEtBkB,UAvEsB,qBAuEXC,OAvEW,CAuEF,CAElB,MAAOC,GAAEC,OAAF,CAAUC,IAAV,CAAeH,OAAf,CACR,CA1EqB,CA4EtBI,UA5EsB,qBA4EXC,WA5EW,CA4EEC,WA5EF,CA4Ee,CACnC,GAAID,YAAY3B,QAAZ,GAAyB4B,YAAY5B,QAAzC,CAAmD,CACjD,KAAKO,WAAL,CAAiBsB,WAAjB,CAA6BD,YAAY5B,QAAzC,CACD,CACF,CAhFqB,CAkFtB8B,cAlFsB,0BAkFL,CACf,MAAO,CACL9B,SAAU,KAAKA,QADV,CAELc,WAAY,KAAKA,UAFZ,CAGLC,YAAa,KAAKA,WAHb,CAILC,YAAa,KAAKe,QAAL,CAAc,KAAKf,WAAnB,CAJR,CAKLC,aAAc,KAAKc,QAAL,CAAc,KAAKd,YAAnB,CALT,CAOR,CA1FqB,CAAxB,CA6FAtB,UAAUqC,WAAV,CAAwB,CACtBC,QAAQC,mBADc,CAEtBvC,UAAUgB,OAFY,CAGtBE,eAHsB,CAAxB,CAUA,GAAMsB,kBAAmB,CACvBpC,WAAY,CAQVqC,cAAe,CACbnC,KAAMoC,OADO,CAEblC,MAAO,KAFM,CAGbC,SAAU,kBAHG,CARL,CAqBVkC,YAAa,CACXrC,KAAMoC,OADK,CAEXlC,MAAO,KAFI,CAGXC,SAAU,kBAHC,CArBH,CAiCVmC,cAAe,CACbtC,KAAMoC,OADO,CAEblC,MAAO,KAFM,CAGbC,SAAU,kBAHG,CAjCL,CADW,CAyCvBiB,UAzCuB,qBAyCZC,OAzCY,CAyCH,CAClB,MAAO,IAAIkB,OAAMC,YAAV,CAAuBnB,OAAvB,CACR,CA3CsB,CA6CvBI,UA7CuB,qBA6CZC,WA7CY,CA6CCC,WA7CD,CA6Cc,CACnC,GAAID,YAAY3B,QAAZ,GAAyB4B,YAAY5B,QAAzC,CAAmD,CACjD,KAAKO,WAAL,CAAiBsB,WAAjB,CAA6BD,YAAY5B,QAAzC,CACD,CACD,GAAI2B,YAAYY,aAAZ,GAA8BX,YAAYW,aAA9C,CAA6D,CAC3D,KAAKhC,WAAL,CAAiBmC,gBAAjB,CAAkCd,YAAYW,aAA9C,CACD,CACD,GAAIZ,YAAYgB,MAAZ,GAAuBf,YAAYe,MAAvC,CAA+C,CAC7C,KAAKpC,WAAL,CAAiBqC,UAAjB,CAA4BhB,YAAYe,MAAxC,CACD,CACD,GAAIhB,YAAYkB,QAAZ,GAAyBjB,YAAYiB,QAAzC,CAAmD,CACjD,KAAKtC,WAAL,CAAiBuC,YAAjB,CAA8BlB,YAAYiB,QAA1C,CACD,CACF,CA1DsB,CA4DvBf,cA5DuB,0BA4DN,CACf,MAAO,CACLe,SAAU,KAAKT,aADV,CAELO,OAAQ,KAAKL,WAFR,CAGLC,cAAe,KAAKA,aAHf,CAILvC,SAAU,KAAKA,QAJV,CAMR,CAnEsB,CAAzB,CAsEAL,UAAU8C,YAAV,CAAyB,CACvB9C,UAAUgB,OADa,CAEvBwB,gBAFuB,CAAzB,CAUA,GAAMY,OAASnD,OAAO4C,KAAP,CAAe5C,OAAO4C,KAAP,EAAgB,EAA9C,CAtOU,GA4OJC,aA5OI,mUA6OGnB,OA7OH,CA6OY,CAClB,kHAAiBA,OAAjB,CACD,CA/OO,oCAiPF0B,GAjPE,CAiPG,CAET,KAAKC,gBAAL,8GAAoCD,GAApC,EAGA,GAAI,KAAK1B,OAAL,CAAaiB,aAAb,GAA+B,IAAnC,CAAyC,CACvChB,EAAE2B,OAAF,CAAUC,QAAV,CAAmB,KAAKF,gBAAxB,CAA0C,gCAA1C,CACD,CAED,MAAO,MAAKA,gBACb,CA3PO,0CA6PCD,GA7PD,CA6PM,CACZ,gHAAeA,GAAf,EAGA,KAAKC,gBAAL,CAAwB,IACzB,CAlQO,0DA2QSG,aA3QT,CA2QwB,CAC9B,GAAI,CAAC,KAAKH,gBAAV,CAA4B,OAE5B,GAAIG,eAAiB,CAAC,KAAK9B,OAAL,CAAaiB,aAAnC,CAAkD,CAChD,KAAKjB,OAAL,CAAaiB,aAAb,CAA6B,IAA7B,CACAhB,EAAE2B,OAAF,CAAUC,QAAV,CAAmB,KAAKF,gBAAxB,CAA0C,gCAA1C,CACD,CAED,GAAI,CAACG,aAAD,EAAkB,KAAK9B,OAAL,CAAaiB,aAAnC,CAAkD,CAChD,KAAKjB,OAAL,CAAaiB,aAAb,CAA6B,KAA7B,CACAhB,EAAE2B,OAAF,CAAUG,WAAV,CAAsB,KAAKJ,gBAA3B,CAA6C,gCAA7C,CACD,CACF,CAvRO,kDA8RKK,kBA9RL,CA8RyB,CAC/B,GAAI,CAAC,KAAKL,gBAAV,CAA4B,OAG5B,GAAIK,oBAAsB,CAAC,KAAKhC,OAAL,CAAauB,QAApC,EAAgD,CAAC,KAAKU,OAA1D,CAAmE,CACjE,KAAKA,OAAL,CAAehC,EAAE2B,OAAF,CAAUM,MAAV,CAAiB,KAAjB,CAAwB,4BAAxB,CAAsD,KAAKP,gBAA3D,CAAf,CACA,KAAK3B,OAAL,CAAauB,QAAb,CAAwB,IACzB,CAGD,GAAI,CAACS,kBAAD,EAAuB,KAAKhC,OAAL,CAAauB,QAApC,EAAgD,KAAKU,OAAzD,CAAkE,CAChE,KAAKjC,OAAL,CAAauB,QAAb,CAAwB,KAAxB,CACAtB,EAAE2B,OAAF,CAAUxC,MAAV,CAAiB,KAAK6C,OAAtB,EACA,KAAKA,OAAL,CAAe,IAChB,CAGD,KAAKE,OAAL,EACD,CAhTO,8CAuTGC,gBAvTH,CAuTqB,CAC3B,GAAI,CAAC,KAAKT,gBAAV,CAA4B,OAG5B,GAAIS,kBAAoB,CAAC,KAAKpC,OAAL,CAAaqB,MAAlC,EAA4C,CAAC,KAAKgB,OAAtD,CAA+D,CAC7D,KAAKA,OAAL,CAAgBpC,EAAE2B,OAAF,CAAUM,MAAV,CAAiB,KAAjB,CAAwB,4BAAxB,CAAsD,KAAKP,gBAA3D,CAAhB,CACA,KAAK3B,OAAL,CAAaqB,MAAb,CAAsB,IACvB,CAGD,GAAI,CAACe,gBAAD,EAAqB,KAAKpC,OAAL,CAAaqB,MAAlC,EAA4C,KAAKgB,OAArD,CAA8D,CAC5D,KAAKrC,OAAL,CAAaqB,MAAb,CAAsB,KAAtB,CACApB,EAAE2B,OAAF,CAAUxC,MAAV,CAAiB,KAAKiD,OAAtB,EACA,KAAKA,OAAL,CAAe,IAChB,CAGD,KAAKF,OAAL,EACD,CAzUO,yBA4OiBlC,EAAEZ,OAAF,CAAUiD,KA5O3B,EA2UT,CAEDb,MAAMN,YAAN,CAAqBA,YAEtB,CA/UD","file":"px-map-behavior-control.js","sourcesContent":["(function() {\n  'use strict';\n\n  /****************************************************************************\n   * BEHAVIORS\n   ****************************************************************************/\n\n  /* Ensures the behavior namespace is created */\n  const namespace = (window.PxMapBehavior = window.PxMapBehavior || {});\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.Control\n   */\n  const ControlImpl = {\n    properties: {\n      /**\n       * Positions the control in one of the map corners. Choose from 'topright',\n       * 'topleft', 'bottomright', or 'bottomleft'.\n       *\n       * @type {String}\n       */\n      position: {\n        type: String,\n        value: 'bottomright',\n        observer: 'shouldUpdateInst'\n      }\n    },\n\n    addInst(parent) {\n      this.elementInst.addTo(parent);\n    },\n\n    removeInst(parent) {\n      this.elementInst.remove();\n    }\n  };\n  /* Bind Control behavior */\n  namespace.Control = [\n    namespace.Layer,\n    ControlImpl\n  ];\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.ZoomControl\n   */\n  const ZoomControlImpl = {\n    properties: {\n      /**\n       * Sets the icon for zoom in button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomInText: {\n        type: String,\n        value: '<i class=\"fa fa-plus\"></i>'\n      },\n\n      /**\n       * Sets the icon for zoom out button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomOutText: {\n        type: String,\n        value: '<i class=\"fa fa-minus\"></i>'\n      },\n\n      /**\n       * Sets the hover text for zoom in button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomInTitle: {\n        type: String,\n        value: 'Zoom in'\n      },\n\n      /**\n       * Sets the hover text for zoom out button\n       * This is not dynamic and can only be set at run time\n       *\n       * @type {String}\n       */\n      zoomOutTitle: {\n        type: String,\n        value: 'Zoom out'\n      },\n\n      /**\n       * Current language for app-localize-behavior\n       *\n       * @type {String}\n       */\n      language: {\n        type: String,\n        value: 'fr'\n      },\n\n      /**\n       * Localized strings for app-localize-behavior\n       *\n       * @type {Object}\n       */\n      resources: {\n        type: Object,\n        value: function() {\n          return { 'en': {'Zoom in': 'Zoom in', 'Zoom out': 'Zoom out' },\n                   'fr': {'Zoom in': 'Zoomeeeen', 'Zoom out': 'Zoomoooout' }\n                 };\n        }\n      }\n    },\n\n    createInst(options) {\n      // return new PxMap.ZoomControl(options);\n      return L.control.zoom(options);\n    },\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.position !== nextOptions.position) {\n        this.elementInst.setPosition(nextOptions.position);\n      }\n    },\n\n    getInstOptions() {\n      return {\n        position: this.position,\n        zoomInText: this.zoomInText,\n        zoomOutText: this.zoomOutText,\n        zoomInTitle: this.localize(this.zoomInTitle),\n        zoomOutTitle: this.localize(this.zoomOutTitle)\n      };\n    }\n  };\n  /* Bind ZoomControl behavior */\n  namespace.ZoomControl = [\n    Polymer.AppLocalizeBehavior,\n    namespace.Control,\n    ZoomControlImpl\n  ];\n\n  /**\n   *\n   * @polymerBehavior PxMapBehavior.ScaleControl\n   */\n  const ScaleControlImpl = {\n    properties: {\n      /**\n       * Shows a imperial unit scale (ft/mi) line if enabled. Multiple unit scales\n       * can be enabled to show multiple scales. If no units are enabled,\n       * the scale cannot be drawn.\n       *\n       * @type {Boolean}\n       */\n      imperialUnits: {\n        type: Boolean,\n        value: false,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * Shows a metric unit scale (m/km) line if enabled. Multiple unit scales\n       * can be enabled to show multiple scales. If no units are enabled,\n       * the scale cannot be drawn.\n       *\n       * @type {Boolean}\n       */\n      metricUnits: {\n        type: Boolean,\n        value: false,\n        observer: 'shouldUpdateInst'\n      },\n\n      /**\n       * Enable to reverse the the scale's colors, making it easier to read\n       * against a dark tile layer.\n       *\n       * @type {Boolean}\n       */\n      reverseColors: {\n        type: Boolean,\n        value: false,\n        observer: 'shouldUpdateInst'\n      }\n    },\n\n    createInst(options) {\n      return new PxMap.ScaleControl(options);\n    },\n\n    updateInst(lastOptions, nextOptions) {\n      if (lastOptions.position !== nextOptions.position) {\n        this.elementInst.setPosition(nextOptions.position);\n      }\n      if (lastOptions.reverseColors !== nextOptions.reverseColors) {\n        this.elementInst.setReverseColors(nextOptions.reverseColors);\n      }\n      if (lastOptions.metric !== nextOptions.metric) {\n        this.elementInst.showMetric(nextOptions.metric);\n      }\n      if (lastOptions.imperial !== nextOptions.imperial) {\n        this.elementInst.showImperial(nextOptions.imperial);\n      }\n    },\n\n    getInstOptions() {\n      return {\n        imperial: this.imperialUnits,\n        metric: this.metricUnits,\n        reverseColors: this.reverseColors,\n        position: this.position\n      };\n    }\n  };\n  /* Bind ScaleControl behavior */\n  namespace.ScaleControl = [\n    namespace.Control,\n    ScaleControlImpl\n  ];\n\n  /****************************************************************************\n   * KLASSES\n   ****************************************************************************/\n\n  /* Ensures the klass namespace is created */\n  const klass = (window.PxMap = window.PxMap || {});\n\n  /**\n   *\n   * @class PxMap.ScaleControl\n   */\n  class ScaleControl extends L.Control.Scale {\n    initialize(options) {\n      super.initialize(options);\n    }\n\n    onAdd(map) {\n      // Call default `onAdd` for scale to get the container\n      this.__scaleContainer = super.onAdd(map);\n\n      // Determine if we should add the reverse modifier CSS class\n      if (this.options.reverseColors === true) {\n        L.DomUtil.addClass(this.__scaleContainer, 'leaflet-control-scale--reverse');\n      }\n\n      return this.__scaleContainer;\n    }\n\n    onRemove(map) {\n      super.onRemove(map);\n\n      // Clean up scaleContainer reference\n      this.__scaleContainer = null;\n    }\n\n    /**\n     * Updates the `reverseColors` setting for the scale control. If the\n     * `shouldReverse` param doesn't match the current classes on the\n     * scale, updates the scale with the necessary classes.\n     *\n     * @param {Boolean} shouldReverse - If `true`, scale should be reversed. If `false`, it should not be.\n     */\n    setReverseColors(shouldReverse) {\n      if (!this.__scaleContainer) return;\n\n      if (shouldReverse && !this.options.reverseColors) {\n        this.options.reverseColors = true;\n        L.DomUtil.addClass(this.__scaleContainer, 'leaflet-control-scale--reverse');\n      }\n\n      if (!shouldReverse && this.options.reverseColors) {\n        this.options.reverseColors = false;\n        L.DomUtil.removeClass(this.__scaleContainer, 'leaflet-control-scale--reverse');\n      }\n    }\n\n    /**\n     * Shows or hides the imperial unit scale.\n     *\n     * @param {Boolean} shouldShowImperial - If `true`, ensures imperial unit scale is visible.\n     */\n    showImperial(shouldShowImperial) {\n      if (!this.__scaleContainer) return;\n\n      // No imperial scale exists, create one\n      if (shouldShowImperial && !this.options.imperial && !this._iScale) {\n        this._iScale = L.DomUtil.create('div', 'leaflet-control-scale-line', this.__scaleContainer);\n        this.options.imperial = true;\n      }\n\n      // We should remove the existing imperial scale\n      if (!shouldShowImperial && this.options.imperial && this._iScale) {\n        this.options.imperial = false;\n        L.DomUtil.remove(this._iScale);\n        this._iScale = null;\n      }\n\n      // Update the scale\n      this._update();\n    }\n\n    /**\n     * Shows or hides the metric unit scale.\n     *\n     * @param {Boolean} shouldShowMetric - If `true`, ensures metric unit scale is visible.\n     */\n    showMetric(shouldShowMetric) {\n      if (!this.__scaleContainer) return;\n\n      // No metric scale exists, create one\n      if (shouldShowMetric && !this.options.metric && !this._mScale) {\n        this._mScale =  L.DomUtil.create('div', 'leaflet-control-scale-line', this.__scaleContainer);\n        this.options.metric = true;\n      }\n\n      // We should remove the existing metric scale\n      if (!shouldShowMetric && this.options.metric && this._mScale) {\n        this.options.metric = false;\n        L.DomUtil.remove(this._mScale);\n        this._mScale = null;\n      }\n\n      // Update the scale\n      this._update();\n    }\n\n  };\n  /* Bind ScaleControl klass */\n  klass.ScaleControl = ScaleControl;\n\n})();\n"]}